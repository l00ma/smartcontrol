#!/usr/bin/perl

use strict;
use warnings;
use Time::HiRes qw( usleep );
use AppConfig qw(:expand :argcount);

#Initialisation de la configuration
my $config = AppConfig->new("gpio_red"    => {ARGCOUNT => ARGCOUNT_ONE},
							"gpio_green"       	=> {ARGCOUNT => ARGCOUNT_ONE},
                            "gpio_blue"  		=> {ARGCOUNT => ARGCOUNT_ONE}							
							);

#Lecture du fichier de configuration
$config->file('/etc/smartcontrol.conf');

#Initialisation des paramÃ¨tres du daemon
my $red_pin = $config->gpio_red();
my $green_pin = $config->gpio_green();
my $blue_pin = $config->gpio_blue();

#run only one instance of me:
use Fcntl ':flock';
open my $self, '<', $0 or die "Couldn't open self: $!";
flock $self, LOCK_EX | LOCK_NB or exit (1);

#Debut du script
# eclairage: valeur min et max
my @tab_deb;
my @tab_fin;
($tab_deb[0], $tab_deb[1], $tab_deb[3] ) = int (rand (255)) x 3 ;
#my $valeur_min = 0;
#my $valeur_max = 255;
#my ($k,$l);
#cycle couleur blanche
#if ( $valeur_min < $valeur_max ) {
	while (1) {

		($tab_fin[0], $tab_fin[1], $tab_fin[2] ) = int (rand (255)) x 3 ;

		my $j= int(rand(14))+1;
		$k= int(rand(255));

		for (my $i=$valeur_min; $i<$valeur_max; $i+=$j)	{ 
			$l = $j * 17;
			`echo "p $red_pin $i" >/dev/pigpio && echo "p $green_pin $k" >/dev/pigpio && echo "p $blue_pin $l" >/dev/pigpio`;
			usleep(10000);

		}
		for (my $i=$valeur_max; $i>$valeur_min; $i-=$j)	{ 
			$l = $j * 17;
			`echo "p $red_pin $i" >/dev/pigpio && echo "p $green_pin $k" >/dev/pigpio && echo "p $blue_pin $l" >/dev/pigpio`;
			usleep(10000);

		}
	}
#}
